<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Sep 30 15:10:49 2020
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
logHexDump &rArr; logWrite &rArr; vsnprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">NMI_Handler</a><BR>
 <LI><a href="#[18]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">HardFault_Handler</a><BR>
 <LI><a href="#[19]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">BusFault_Handler</a><BR>
 <LI><a href="#[1b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SVC_Handler</a><BR>
 <LI><a href="#[1d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">SysTick_Handler</a><BR>
 <LI><a href="#[56]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[56]">ACC_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[32]">ADC1_2_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[34]">CAN1_RX0_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[35]">CAN1_RX1_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[36]">CAN1_SCE_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[33]">CAN1_TX_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[54]">COMP1_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[55]">COMP2_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel1_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel2_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel3_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel4_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel5_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[30]">DMA1_Channel6_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[31]">DMA1_Channel7_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel1_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[50]">DMA2_Channel2_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[51]">DMA2_Channel3_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[52]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[57]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[49]">ERTCAlarm_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[23]">ERTC_WKUP_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from infrade_r.o(i.EXTI9_5_IRQHandler) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[18]">HardFault_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[15]">SPI1_ReadWriteByte</a> from spi.o(i.SPI1_ReadWriteByte) referenced 4 times from nrf24l01.o(.data)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_at32f4xx.o(i.SystemInit) referenced from startup_at32f415r8t7.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[38]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[3b]">TMR1_CC_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[39]">TMR1_OV_TMR10_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[3a]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[3c]">TMR2_GLOBAL_IRQHandler</a> from task.o(i.TMR2_GLOBAL_IRQHandler) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[3d]">TMR3_GLOBAL_IRQHandler</a> from buzzer.o(i.TMR3_GLOBAL_IRQHandler) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[3e]">TMR4_GLOBAL_IRQHandler</a> from infrade_r.o(i.TMR4_GLOBAL_IRQHandler) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[4c]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[4d]">UART4_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[4e]">UART5_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[53]">USBOTG_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[4a]">USBWakeUp_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_at32f415r8t7.o(.text) referenced from startup_at32f415r8t7.o(RESET)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f415r8t7.o(.text)
 <LI><a href="#[5b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[6]">blue_red_drv</a> from led.o(i.blue_red_drv) referenced 2 times from led.o(.data)
 <LI><a href="#[3]">ir_thread_entry</a> from infrade_r.o(i.ir_thread_entry) referenced 2 times from task.o(.data)
 <LI><a href="#[1]">key_thread_entry</a> from ts06.o(i.key_thread_entry) referenced 2 times from task.o(.data)
 <LI><a href="#[4]">led_gpio_init</a> from led.o(i.led_gpio_init) referenced 2 times from led.o(.data)
 <LI><a href="#[0]">led_thread_entry</a> from led.o(i.led_thread_entry) referenced 2 times from task.o(.data)
 <LI><a href="#[5d]">logHexDump</a> from log.o(i.logHexDump) referenced from log.o(shellCommand)
 <LI><a href="#[5c]">logSetLevel</a> from log.o(i.logSetLevel) referenced from log.o(shellCommand)
 <LI><a href="#[58]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[10]">nrf24_ce</a> from nrf24l01.o(i.nrf24_ce) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[f]">nrf24_ce_gpio_init</a> from nrf24l01.o(i.nrf24_ce_gpio_init) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[14]">nrf24_cs</a> from nrf24l01.o(i.nrf24_cs) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[13]">nrf24_cs_gpio_init</a> from nrf24l01.o(i.nrf24_cs_gpio_init) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[e]">nrf24_irq_gpio_init</a> from nrf24l01.o(i.nrf24_irq_gpio_init) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[11]">nrf24_irq_read</a> from nrf24l01.o(i.nrf24_irq_read) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[5]">red_red_drv</a> from led.o(i.red_red_drv) referenced 2 times from led.o(.data)
 <LI><a href="#[2]">rf_thread_entry</a> from nrf24l01.o(i.rf_thread_entry) referenced 2 times from task.o(.data)
 <LI><a href="#[64]">shellBackspace</a> from shell.o(i.shellBackspace) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[6c]">shellClear</a> from shell.o(i.shellClear) referenced from shell.o(shellCommand)
 <LI><a href="#[69]">shellCmds</a> from shell.o(i.shellCmds) referenced from shell.o(shellCommand)
 <LI><a href="#[65]">shellDelete</a> from shell.o(i.shellDelete) referenced from shell.o(shellCommand)
 <LI><a href="#[60]">shellDown</a> from shell.o(i.shellDown) referenced from shell.o(shellCommand)
 <LI><a href="#[66]">shellEnter</a> from shell.o(i.shellEnter) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[67]">shellHelp</a> from shell.o(i.shellHelp) referenced from shell.o(shellCommand)
 <LI><a href="#[6b]">shellKeys</a> from shell.o(i.shellKeys) referenced from shell.o(shellCommand)
 <LI><a href="#[62]">shellLeft</a> from shell.o(i.shellLeft) referenced from shell.o(shellCommand)
 <LI><a href="#[61]">shellRight</a> from shell.o(i.shellRight) referenced from shell.o(shellCommand)
 <LI><a href="#[5e]">shellSetVar</a> from shell.o(i.shellSetVar) referenced from shell.o(shellCommand)
 <LI><a href="#[63]">shellTab</a> from shell.o(i.shellTab) referenced from shell.o(shellCommand)
 <LI><a href="#[5f]">shellUp</a> from shell.o(i.shellUp) referenced from shell.o(shellCommand)
 <LI><a href="#[68]">shellUsers</a> from shell.o(i.shellUsers) referenced from shell.o(shellCommand)
 <LI><a href="#[6a]">shellVars</a> from shell.o(i.shellVars) referenced from shell.o(shellCommand)
 <LI><a href="#[12]">spi_gpio_init</a> from spi.o(i.spi_gpio_init) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[7]">ts06_gpio_init</a> from ts06.o(i.ts06_gpio_init) referenced 2 times from ts06.o(.data)
 <LI><a href="#[b]">ts06_sck_out</a> from ts06.o(i.ts06_sck_out) referenced 2 times from ts06.o(.data)
 <LI><a href="#[8]">ts06_sda_mode</a> from ts06.o(i.ts06_sda_mode) referenced 2 times from ts06.o(.data)
 <LI><a href="#[a]">ts06_sda_out</a> from ts06.o(i.ts06_sda_out) referenced 2 times from ts06.o(.data)
 <LI><a href="#[9]">ts06_sda_read</a> from ts06.o(i.ts06_sda_read) referenced 2 times from ts06.o(.data)
 <LI><a href="#[d]">xdelay_ms</a> from delay.o(i.xdelay_ms) referenced 4 times from ts06.o(.data)
 <LI><a href="#[c]">xdelay_us</a> from delay.o(i.xdelay_us) referenced 4 times from ts06.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[120]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>COMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TMR1_OV_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415r8t7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_study_record
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[109]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRemoveParamQuotes
</UL>

<P><STRONG><a name="[e4]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistoryAdd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPassword
</UL>

<P><STRONG><a name="[d8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_check
</UL>

<P><STRONG><a name="[10d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[127]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[75]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[128]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[129]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[12a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>Checksum</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf24l01.o(i.Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
</UL>

<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, infrade_r.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ir_study_record &rArr; infrade_rx_interrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_study_record
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>EXTI_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrade_rx_interrupt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>EXTI_GetIntStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrade_rx_interrupt
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, at32f4xx_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrade_rx_interrupt
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, at32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gpio_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_irq_gpio_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_cs_gpio_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_ce_gpio_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_gpio_init
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_irq_read
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_sda_read
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_wave_analyze
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_red_drv
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_red_drv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_speak
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_cs
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_ce
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_sda_out
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_sck_out
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_red_drv
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gpio_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_red_drv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_speak
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_cs
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_ce
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_sda_out
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_sck_out
</UL>

<P><STRONG><a name="[88]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wdg.o(i.IWDG_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[be]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrade_rx_interrupt
</UL>

<P><STRONG><a name="[ce]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[af]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gpio_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_irq_gpio_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_cs_gpio_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_ce_gpio_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_gpio_init
</UL>

<P><STRONG><a name="[8f]"></a>RCC_StepModeCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_StepModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo144M
</UL>

<P><STRONG><a name="[15]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TxData
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_RxData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>SPI_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_init
</UL>

<P><STRONG><a name="[8a]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[8c]"></a>SPI_I2S_RxData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_RxData))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[8b]"></a>SPI_I2S_TxData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_TxData))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[111]"></a>SPI_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, at32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_gpio_init
</UL>

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo144M
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, task.o(i.TMR2_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR2_GLOBAL_IRQHandler &rArr; TMR_GetINTStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buzzer.o(i.TMR3_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR3_GLOBAL_IRQHandler &rArr; buzzer_thread_entry &rArr; buzzer_speak
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_thread_entry
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, infrade_r.o(i.TMR4_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR4_GLOBAL_IRQHandler &rArr; ir_wave_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_wave_analyze
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_status_analyze
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>TMR_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[93]"></a>TMR_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_GLOBAL_IRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>TMR_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[c9]"></a>TMR_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_wave_analyze
</UL>

<P><STRONG><a name="[c4]"></a>TMR_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_study_record
</UL>

<P><STRONG><a name="[91]"></a>TMR_GetINTStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at32f4xx_tim.o(i.TMR_GetINTStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_GetINTStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_GLOBAL_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>TMR_ICInit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TMR_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetIC4DIV
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetIC3DIV
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetIC2DIV
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetIC1DIV
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
</UL>

<P><STRONG><a name="[115]"></a>TMR_INTConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_INTConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[c8]"></a>TMR_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC2PolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_wave_analyze
</UL>

<P><STRONG><a name="[c5]"></a>TMR_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_wave_analyze
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_study_record
</UL>

<P><STRONG><a name="[99]"></a>TMR_SetIC1DIV</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetIC1DIV))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[9b]"></a>TMR_SetIC2DIV</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetIC2DIV))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[9d]"></a>TMR_SetIC3DIV</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetIC3DIV))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[9f]"></a>TMR_SetIC4DIV</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetIC4DIV))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[113]"></a>TMR_TimeBaseInit</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415r8t7.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12e]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[12f]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[130]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[cd]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logWrite
</UL>

<P><STRONG><a name="[131]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6]"></a>blue_red_drv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.blue_red_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blue_red_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>buzzer_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, buzzer.o(i.buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = buzzer_init &rArr; timer3_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>buzzer_speak</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, buzzer.o(i.buzzer_speak))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buzzer_speak
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_thread_entry
</UL>

<P><STRONG><a name="[85]"></a>buzzer_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buzzer.o(i.buzzer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buzzer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_code_parse
</UL>

<P><STRONG><a name="[94]"></a>buzzer_thread_entry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer.o(i.buzzer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = buzzer_thread_entry &rArr; buzzer_speak
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_speak
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>data_bitreverse</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, myiic.o(i.data_bitreverse))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sendbyte
</UL>

<P><STRONG><a name="[b3]"></a>getkey</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, ts06.o(i.getkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getkey &rArr; ts06_readbyte &rArr; iic_readbyte &rArr; iic_nack
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_func
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_thread_entry
</UL>

<P><STRONG><a name="[cb]"></a>holdkey_handle</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ts06.o(i.holdkey_handle))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_thread_entry
</UL>

<P><STRONG><a name="[b8]"></a>iic_ack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(i.iic_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>

<P><STRONG><a name="[118]"></a>iic_delayms</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, myiic.o(i.iic_delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_init
</UL>

<P><STRONG><a name="[117]"></a>iic_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, myiic.o(i.iic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_init
</UL>

<P><STRONG><a name="[b7]"></a>iic_nack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(i.iic_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_nack
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>

<P><STRONG><a name="[b6]"></a>iic_readbyte</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, myiic.o(i.iic_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iic_readbyte &rArr; iic_nack
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_nack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_readbyte
</UL>

<P><STRONG><a name="[b9]"></a>iic_sendbyte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, myiic.o(i.iic_sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iic_sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_bitreverse
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_writebyte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_readbyte
</UL>

<P><STRONG><a name="[11a]"></a>iic_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(i.iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_writebyte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_readbyte
</UL>

<P><STRONG><a name="[bc]"></a>iic_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(i.iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_wait_ack
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_writebyte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_readbyte
</UL>

<P><STRONG><a name="[bb]"></a>iic_wait_ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, myiic.o(i.iic_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iic_wait_ack &rArr; iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_writebyte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_readbyte
</UL>

<P><STRONG><a name="[bd]"></a>infrade_rx_interrupt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, infrade_r.o(i.infrade_rx_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = infrade_rx_interrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_study_record
</UL>

<P><STRONG><a name="[c1]"></a>infrared_rx_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, infrade_r.o(i.infrared_rx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = infrared_rx_init &rArr; timer4_init &rArr; TMR_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer4_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>ir_thread_entry</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, infrade_r.o(i.ir_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ir_thread_entry &rArr; ir_code_parse &rArr; led_func
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_study_status
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_code_parse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>key_thread_entry</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ts06.o(i.key_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = key_thread_entry &rArr; getkey &rArr; ts06_readbyte &rArr; iic_readbyte &rArr; iic_nack
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigkey_handle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;holdkey_handle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>led_func</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, led.o(i.led_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_func
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_entry
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_study_record
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_code_parse
</UL>

<P><STRONG><a name="[4]"></a>led_gpio_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, led.o(i.led_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>led_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>led_thread_entry</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, led.o(i.led_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_thread_entry &rArr; led_func
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>logHexDump</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, log.o(i.logHexDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = logHexDump &rArr; logWrite &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(shellCommand)
</UL>
<P><STRONG><a name="[5c]"></a>logSetLevel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, log.o(i.logSetLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = logSetLevel &rArr; logWrite &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(shellCommand)
</UL>
<P><STRONG><a name="[cc]"></a>logWrite</STRONG> (Thumb, 122 bytes, Stack size 296 bytes, log.o(i.logWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = logWrite &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logSetLevel
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logHexDump
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = main &rArr; infrared_rx_init &rArr; timer4_init &rArr; TMR_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10]"></a>nrf24_ce</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf24l01.o(i.nrf24_ce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf24_ce
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>nrf24_ce_gpio_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf24l01.o(i.nrf24_ce_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf24_ce_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>nrf24_check</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf24l01.o(i.nrf24_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf24_check &rArr; nrf24_write_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register_nbytes
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_read_register_nbytes
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_init
</UL>

<P><STRONG><a name="[14]"></a>nrf24_cs</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf24l01.o(i.nrf24_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf24_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>nrf24_cs_gpio_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf24l01.o(i.nrf24_cs_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf24_cs_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>nrf24_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf24l01.o(i.nrf24_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf24_init &rArr; nrf24_check &rArr; nrf24_write_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_tx_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_rx_mode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_check
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>nrf24_irq_gpio_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf24l01.o(i.nrf24_irq_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf24_irq_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>nrf24_irq_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf24l01.o(i.nrf24_irq_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf24_irq_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>nrf24_read_register</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf24l01.o(i.nrf24_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf24_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_txpacket
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_rxpacket
</UL>

<P><STRONG><a name="[d7]"></a>nrf24_read_register_nbytes</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, nrf24l01.o(i.nrf24_read_register_nbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf24_read_register_nbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_rxpacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_check
</UL>

<P><STRONG><a name="[da]"></a>nrf24_rx_mode</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf24l01.o(i.nrf24_rx_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf24_rx_mode &rArr; nrf24_write_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register_nbytes
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_init
</UL>

<P><STRONG><a name="[dc]"></a>nrf24_rxpacket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf24l01.o(i.nrf24_rxpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf24_rxpacket &rArr; nrf24_read_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_read_register_nbytes
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
</UL>

<P><STRONG><a name="[de]"></a>nrf24_transmit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, nrf24l01.o(i.nrf24_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf24_transmit &rArr; nrf24_txpacket &rArr; nrf24_write_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_func
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_txpacket
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_rxpacket
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_thread_entry
</UL>

<P><STRONG><a name="[d9]"></a>nrf24_tx_mode</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf24l01.o(i.nrf24_tx_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf24_tx_mode &rArr; nrf24_write_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register_nbytes
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_init
</UL>

<P><STRONG><a name="[e1]"></a>nrf24_txpacket</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrf24l01.o(i.nrf24_txpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf24_txpacket &rArr; nrf24_write_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register_nbytes
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_write_register
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
</UL>

<P><STRONG><a name="[db]"></a>nrf24_write_register</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf24l01.o(i.nrf24_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf24_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_txpacket
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_tx_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_rxpacket
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_rx_mode
</UL>

<P><STRONG><a name="[d6]"></a>nrf24_write_register_nbytes</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nrf24l01.o(i.nrf24_write_register_nbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf24_write_register_nbytes
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_txpacket
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_tx_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_rx_mode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_check
</UL>

<P><STRONG><a name="[5]"></a>red_red_drv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.red_red_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = red_red_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>rf_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf24l01.o(i.rf_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rf_thread_entry &rArr; nrf24_transmit &rArr; nrf24_txpacket &rArr; nrf24_write_register_nbytes
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>shellBackspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell.o(i.shellBackspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellBackspace &rArr; shellDeleteByte &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[103]"></a>shellCheckPermission</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, shell.o(i.shellCheckPermission))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
</UL>

<P><STRONG><a name="[6c]"></a>shellClear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, shell.o(i.shellClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellClear &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[e7]"></a>shellClearCommandLine</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(i.shellClearCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteCommandLine
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>

<P><STRONG><a name="[69]"></a>shellCmds</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell.o(i.shellCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellCmds &rArr; shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[65]"></a>shellDelete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shell.o(i.shellDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellDelete &rArr; shellDeleteByte &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[e2]"></a>shellDeleteByte</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, shell.o(i.shellDeleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellDeleteByte &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteCommandLine
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDelete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellBackspace
</UL>

<P><STRONG><a name="[e9]"></a>shellDeleteCommandLine</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shell.o(i.shellDeleteCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
</UL>

<P><STRONG><a name="[60]"></a>shellDown</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shell.o(i.shellDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellDown &rArr; shellHistory &rArr; shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[66]"></a>shellEnter</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell.o(i.shellEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = shellEnter &rArr; shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[ec]"></a>shellExec</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, shell.o(i.shellExec))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandLine
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellParserParam
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistoryAdd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
</UL>

<P><STRONG><a name="[f6]"></a>shellExtParsePara</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell_ext.o(i.shellExtParsePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseChar
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseVar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
</UL>

<P><STRONG><a name="[fb]"></a>shellExtRun</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, shell_ext.o(i.shellExtRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[e6]"></a>shellGetCurrent</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, shell.o(i.shellGetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellVars
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUsers
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellKeys
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCmds
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClear
</UL>

<P><STRONG><a name="[fa]"></a>shellGetVarValue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, shell.o(i.shellGetVarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shellGetVarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseVar
</UL>

<P><STRONG><a name="[67]"></a>shellHelp</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, shell.o(i.shellHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = shellHelp &rArr; shellListAll &rArr; shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListAll
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[6b]"></a>shellKeys</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell.o(i.shellKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellKeys &rArr; shellListKey &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[62]"></a>shellLeft</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell.o(i.shellLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellLeft &rArr; shellWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[ff]"></a>shellListAll</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, shell.o(i.shellListAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellListAll &rArr; shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
</UL>

<P><STRONG><a name="[ea]"></a>shellListCommand</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, shell.o(i.shellListCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListAll
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCmds
</UL>

<P><STRONG><a name="[104]"></a>shellListItem</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, shell.o(i.shellListItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandDesc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
</UL>

<P><STRONG><a name="[102]"></a>shellListKey</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, shell.o(i.shellListKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = shellListKey &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellKeys
</UL>

<P><STRONG><a name="[106]"></a>shellListUser</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, shell.o(i.shellListUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = shellListUser &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUsers
</UL>

<P><STRONG><a name="[107]"></a>shellListVar</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, shell.o(i.shellListVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = shellListVar &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellVars
</UL>

<P><STRONG><a name="[61]"></a>shellRight</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(i.shellRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellRight &rArr; shellWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[f0]"></a>shellSeekCommand</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, shell.o(i.shellSeekCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseVar
</UL>

<P><STRONG><a name="[5e]"></a>shellSetVar</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, shell.o(i.shellSetVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = shellSetVar &rArr; shellSetVarValue &rArr; shellShowVar &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[10e]"></a>shellSetVarValue</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, shell.o(i.shellSetVarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellSetVarValue &rArr; shellShowVar &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
</UL>

<P><STRONG><a name="[63]"></a>shellTab</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, shell.o(i.shellTab))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = shellTab &rArr; shellListAll &rArr; shellListCommand &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListAll
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPermission
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandLine
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCopy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCompare
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[10f]"></a>shellToDec</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, shell.o(i.shellToDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = shellToDec
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
</UL>

<P><STRONG><a name="[fe]"></a>shellToHex</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, shell.o(i.shellToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = shellToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCommandName
</UL>

<P><STRONG><a name="[5f]"></a>shellUp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell.o(i.shellUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellUp &rArr; shellHistory &rArr; shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[68]"></a>shellUsers</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell.o(i.shellUsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellUsers &rArr; shellListUser &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[6a]"></a>shellVars</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell.o(i.shellVars))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellVars &rArr; shellListVar &rArr; shellListItem &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[e5]"></a>shellWriteString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(i.shellWriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellWriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListVar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListUser
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListKey
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteCommandLine
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClear
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandLine
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCheckPassword
</UL>

<P><STRONG><a name="[12]"></a>spi_gpio_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, spi.o(i.spi_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>task_handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, task.o(i.task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>task_scheduler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, task.o(i.task_scheduler))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>timer2_init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timer.o(i.timer2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer2_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_INTConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearFlag
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>timer3_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, timer.o(i.timer3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer3_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_INTConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearFlag
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_init
</UL>

<P><STRONG><a name="[c2]"></a>timer4_init</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, timer.o(i.timer4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = timer4_init &rArr; TMR_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_INTConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearFlag
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrared_rx_init
</UL>

<P><STRONG><a name="[ca]"></a>trigkey_handle</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ts06.o(i.trigkey_handle))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_thread_entry
</UL>

<P><STRONG><a name="[7]"></a>ts06_gpio_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ts06.o(i.ts06_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ts06_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts06.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>ts06_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ts06.o(i.ts06_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ts06_init &rArr; ts06_writebyte &rArr; iic_wait_ack &rArr; iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_delayms
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_writebyte
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>ts06_readbyte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ts06.o(i.ts06_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ts06_readbyte &rArr; iic_readbyte &rArr; iic_nack
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_wait_ack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sendbyte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[b]"></a>ts06_sck_out</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ts06.o(i.ts06_sck_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ts06_sck_out
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts06.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ts06_sda_mode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ts06.o(i.ts06_sda_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ts06_sda_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts06.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ts06_sda_out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ts06.o(i.ts06_sda_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ts06_sda_out
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts06.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ts06_sda_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ts06.o(i.ts06_sda_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ts06_sda_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts06.o(.data)
</UL>
<P><STRONG><a name="[119]"></a>ts06_writebyte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ts06.o(i.ts06_writebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ts06_writebyte &rArr; iic_wait_ack &rArr; iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_wait_ack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ts06_init
</UL>

<P><STRONG><a name="[d]"></a>xdelay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, delay.o(i.xdelay_ms))
<BR>[Address Reference Count : 2]<UL><LI> ts06.o(.data)
<LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>xdelay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(i.xdelay_us))
<BR>[Address Reference Count : 2]<UL><LI> ts06.o(.data)
<LI> nrf24l01.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c3]"></a>ir_code_parse</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, infrade_r.o(i.ir_code_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ir_code_parse &rArr; led_func
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_func
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_thread_entry
</UL>

<P><STRONG><a name="[95]"></a>ir_status_analyze</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, infrade_r.o(i.ir_status_analyze))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>ir_study_record</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, infrade_r.o(i.ir_study_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ir_study_record &rArr; infrade_rx_interrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_func
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetCounter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetCounter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infrade_rx_interrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>ir_study_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, infrade_r.o(i.ir_study_status))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_thread_entry
</UL>

<P><STRONG><a name="[96]"></a>ir_wave_analyze</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, infrade_r.o(i.ir_wave_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ir_wave_analyze
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetCounter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC2PolarityConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetCapture2
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>shellCheckPassword</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, shell.o(i.shellCheckPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellCheckPassword &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[100]"></a>shellGetCommandDesc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, shell.o(i.shellGetCommandDesc))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
</UL>

<P><STRONG><a name="[fd]"></a>shellGetCommandName</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, shell.o(i.shellGetCommandName))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
</UL>

<P><STRONG><a name="[eb]"></a>shellHistory</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, shell.o(i.shellHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellHistory &rArr; shellClearCommandLine &rArr; shellDeleteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDown
</UL>

<P><STRONG><a name="[ee]"></a>shellHistoryAdd</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, shell.o(i.shellHistoryAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellHistoryAdd &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellStringCopy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[ef]"></a>shellParserParam</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, shell.o(i.shellParserParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shellParserParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[108]"></a>shellRemoveParamQuotes</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, shell.o(i.shellRemoveParamQuotes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellRemoveParamQuotes
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[f1]"></a>shellRunCommand</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, shell.o(i.shellRunCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetUser
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRemoveParamQuotes
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[10c]"></a>shellSetUser</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell.o(i.shellSetUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellSetUser &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[10b]"></a>shellShowVar</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, shell.o(i.shellShowVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellShowVar &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToDec
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[110]"></a>shellStringCompare</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, shell.o(i.shellStringCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = shellStringCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
</UL>

<P><STRONG><a name="[101]"></a>shellStringCopy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, shell.o(i.shellStringCopy))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistoryAdd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>

<P><STRONG><a name="[e8]"></a>shellWriteByte</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, shell.o(i.shellWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRight
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellLeft
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellClearCommandLine
</UL>

<P><STRONG><a name="[105]"></a>shellWriteCommandDesc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, shell.o(i.shellWriteCommandDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellWriteCommandDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>

<P><STRONG><a name="[ed]"></a>shellWriteCommandLine</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, shell.o(i.shellWriteCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellWriteCommandLine &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
</UL>

<P><STRONG><a name="[10a]"></a>shellWriteReturnValue</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, shell.o(i.shellWriteReturnValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shellWriteReturnValue &rArr; shellWriteString
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToHex
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellToDec
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[f3]"></a>shellExtNumType</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, shell_ext.o(i.shellExtNumType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shellExtNumType
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[f7]"></a>shellExtParseChar</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, shell_ext.o(i.shellExtParseChar))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseString
</UL>

<P><STRONG><a name="[f2]"></a>shellExtParseNumber</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, shell_ext.o(i.shellExtParseNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellExtParseNumber &rArr; shellExtNumType
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtNumType
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[f9]"></a>shellExtParseString</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, shell_ext.o(i.shellExtParseString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellExtParseString
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[f8]"></a>shellExtParseVar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell_ext.o(i.shellExtParseVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellExtParseVar &rArr; shellSeekCommand &rArr; shellGetCommandName &rArr; shellToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[f4]"></a>shellExtToNum</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, shell_ext.o(i.shellExtToNum))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParseNumber
</UL>

<P><STRONG><a name="[98]"></a>TI1_Config</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, at32f4xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[9a]"></a>TI2_Config</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, at32f4xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[9c]"></a>TI3_Config</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, at32f4xx_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[9e]"></a>TI4_Config</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, at32f4xx_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ICInit
</UL>

<P><STRONG><a name="[8d]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock &rArr; SetSysClockTo144M
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo144M
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8e]"></a>SetSysClockTo144M</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, system_at32f4xx.o(i.SetSysClockTo144M))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo144M
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_StepModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[a7]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a6]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[aa]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
